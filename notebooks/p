### A Pluto.jl notebook ###
# v0.17.7

using Markdown
using InteractiveUtils

# ╔═╡ 73c60cec-8770-11ec-31bf-4fb8ebf50c14
md"""
# Julia Bootcamp - Performance
"""

# ╔═╡ 55a9a065-fa9a-4efa-97c4-a2888f1c41cf
md"""
## The Basics

1. All performance critical code has to be inside a function
2. Avoid global variables at all cost
3. Pre-allocate arrays and/or avoid too much memory allocation in general
4. Don't confuse the julia compiler by writing code with *type instability*

### So. Why is julia fast anyway?

* Julia runs as fast as C or fortran because the julia compiler (based on the [LLVM](https://llvm.org/) compiler) generates machine instructions which are very similar, if not identical to those low-level languages.
* In cases where this is not true, something is wrong (usually with the code we wrote).
* the key is how julia specializes instructions for the supplied input types: adding two `Int` is not the same LLVM instruction as is adding to `Float`s, for example.
"""

# ╔═╡ b9890487-5f26-4c80-8c5c-be78f5f7e81a


# ╔═╡ 562743ee-4066-4abf-a5fe-d7e5e0f65bbb
begin
	q(text) = Markdown.MD(Markdown.Admonition("tip", "Question", [text]));
	info(text) = Markdown.MD(Markdown.Admonition("info", "Info", [text]));
	danger(text) = Markdown.MD(Markdown.Admonition("danger", "Caution", [text]));
end

# ╔═╡ 29d644da-f3a1-4bfa-8f19-6f6856406e8e
info(md"""The manual section on [performance tips](https://docs.julialang.org/en/v1/manual/performance-tips/) is a great place to look for more on performance issues. Also, use [stackoverflow](https://stackoverflow.com/questions/tagged/julia) and the [julia discourse forum](https://discourse.julialang.org/) to post issues with your code not performing well. People are very helpful.
"""
)

# ╔═╡ 00000000-0000-0000-0000-000000000001
PLUTO_PROJECT_TOML_CONTENTS = """
[deps]
"""

# ╔═╡ 00000000-0000-0000-0000-000000000002
PLUTO_MANIFEST_TOML_CONTENTS = """
# This file is machine-generated - editing it directly is not advised

julia_version = "1.7.1"
manifest_format = "2.0"

[deps]
"""

# ╔═╡ Cell order:
# ╟─73c60cec-8770-11ec-31bf-4fb8ebf50c14
# ╟─29d644da-f3a1-4bfa-8f19-6f6856406e8e
# ╟─55a9a065-fa9a-4efa-97c4-a2888f1c41cf
# ╠═b9890487-5f26-4c80-8c5c-be78f5f7e81a
# ╠═562743ee-4066-4abf-a5fe-d7e5e0f65bbb
# ╟─00000000-0000-0000-0000-000000000001
# ╟─00000000-0000-0000-0000-000000000002
